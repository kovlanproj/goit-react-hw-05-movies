{"version":3,"file":"static/js/933.9f6fb5be.chunk.js","mappings":"uMAGaA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMP,GAA1C,SACGI,KAFID,EADC,KASjB,C,sGCdYK,EAAY,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eAC3C,OACE,kBAAMC,aAAa,MAAMC,SAAUH,EAAnC,WACE,kBACEI,KAAK,OACLC,KAAK,QACLN,MAAOA,EACPO,SAAU,SAAAC,GAAC,OAAIN,EAAeM,EAAEC,OAAOT,MAA5B,KAEb,mBAAQK,KAAK,SAAb,sBAGL,E,uCCZYK,E,QAAYC,GAAAA,GAAH,0CC8CtB,EAxCe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOtB,EAAP,KAAeuB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA0BJ,EAAAA,EAAAA,WAAS,kCAAMG,EAAaE,IAAI,gBAAvB,QAAmC,EAAnC,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAcL,EAAaE,IAAI,SAkBrC,OANAI,EAAAA,EAAAA,YAAU,WACJD,IACFE,EAAAA,EAAAA,IAAeF,GAAaG,KAAKV,EAEpC,GAAE,CAACO,KAGF,UAACV,EAAD,qBAEE,SAACX,EAAD,CACEC,MAAOkB,EACPjB,SAlBW,SAAAO,GACfA,EAAEgB,iBAEFR,EAA0B,KAAVE,EAAe,CAAEA,MAAOA,GAAU,CAAC,EAEpD,EAcKhB,eAvBiB,SAAAgB,GACrBC,EAASD,EACV,IAuBI5B,IAAU,SAACD,EAAA,EAAD,CAAYC,OAAQA,IAC9BA,GAA4B,IAAlBA,EAAOmC,SAChB,mEAIP,C","sources":["components/MoviesList/MoviesList.jsx","components/SeearchBox.jsx","pages/Movies.styled.js","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const SearchBox = ({ value, onSearch, onChangeFilter }) => {\n  return (\n    <form autoComplete=\"off\" onSubmit={onSearch}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchBox.propTypes = {\n  value: PropTypes.string,\n  onSearch: PropTypes.func,\n  onChangeFilter: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const MoviesBox = styled.ul`\n  padding: 15px;\n`;\n","import { useSearchParams } from 'react-router-dom';\nimport { SearchBox } from 'components/SeearchBox';\nimport { useState } from 'react';\nimport { getMovieByName } from 'services/movieApi';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useEffect } from 'react';\nimport { MoviesBox } from './Movies.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const [query, setQuery] = useState(() => searchParams.get('query') ?? '');\n  // setQuery(searchParams.get('filter') ?? '');\n  const searchQuery = searchParams.get('query');\n  const onChangeFilter = query => {\n    setQuery(query);\n  };\n\n  const onSearch = e => {\n    e.preventDefault();\n    // const value = e.target.value;\n    setSearchParams(query !== '' ? { query: query } : {});\n    // setQuery(value);\n  };\n\n  useEffect(() => {\n    if (searchQuery) {\n      getMovieByName(searchQuery).then(setMovies);\n    }\n  }, [searchQuery]);\n\n  return (\n    <MoviesBox>\n      Movies\n      <SearchBox\n        value={query}\n        onSearch={onSearch}\n        onChangeFilter={onChangeFilter}\n      />\n      {movies && <MoviesList movies={movies} />}\n      {movies && movies.length === 0 && (\n        <div>There are not movies with such name</div>\n      )}\n    </MoviesBox>\n  );\n};\n\nexport default Movies;\n"],"names":["MoviesList","movies","location","useLocation","map","id","title","to","state","from","SearchBox","value","onSearch","onChangeFilter","autoComplete","onSubmit","type","name","onChange","e","target","MoviesBox","styled","useState","setMovies","useSearchParams","searchParams","setSearchParams","get","query","setQuery","searchQuery","useEffect","getMovieByName","then","preventDefault","length"],"sourceRoot":""}